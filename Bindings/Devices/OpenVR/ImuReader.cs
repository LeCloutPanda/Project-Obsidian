// <auto-generated/>
/* *******************************
Generated for type: OpenvrDataGetter.ImuReader
Generated on: 3/12/2024 2:10:51 AM
Source assembly: Project-Obsidian, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
******************************* */

using System;
using ProtoFlux.Core;
using Elements.Core;
using FrooxEngine;
using FrooxEngine.ProtoFlux;
using OpenvrDataGetter;

namespace FrooxEngine.OpenvrDataGetter
{
    
    
    
    [Category("ProtoFlux/Runtimes/Execution/Nodes/OpenvrDataGetter")]
    public  partial class ImuReader : global::FrooxEngine.ProtoFlux.Runtimes.Execution.AsyncActionNode<global::FrooxEngine.ProtoFlux.FrooxEngineContext>
        
        
    {
        public override Type NodeType => typeof(global::OpenvrDataGetter.ImuReader);

        

        
public global::OpenvrDataGetter.ImuReader TypedNodeInstance { get; private set;}
public override INode NodeInstance => TypedNodeInstance;

public override N Instantiate<N>()
{
                if(TypedNodeInstance != null)
                    throw new InvalidOperationException("Node has already been instantiated");

                var node = new global::OpenvrDataGetter.ImuReader();

                TypedNodeInstance = node;

                OnInstantiated();

                return node as N;
}

partial void OnInstantiated();

protected override void AssociateInstanceInternal(INode node)
{
    if(node is global::OpenvrDataGetter.ImuReader typedNode)
    {
        TypedNodeInstance = typedNode;

        OnInstantiated();
    }
    else
        throw new ArgumentException("Node instance is not of type " + typeof(global::OpenvrDataGetter.ImuReader));
}

public override void ClearInstance() => TypedNodeInstance = null;


        
        
        

        public override int NodeInputCount => base.NodeInputCount + 1;
        

        public override int NodeOutputCount => base.NodeOutputCount + 6;
        

        public override int NodeImpulseCount => base.NodeImpulseCount + 4;
        

        
        

        

        
        

             protected override ISyncRef GetInputInternal(ref int index)
        {
            var @base = base.GetInputInternal(ref index);

            if(@base != null)
                return @base;

            switch(index)
            {
                case 0: return DevicePath;

                default:
                    index -= 1;
                    return null;
            };
        }

             protected override INodeOutput GetOutputInternal(ref int index)
        {
            var @base = base.GetOutputInternal(ref index);

            if(@base != null)
                return @base;

            switch(index)
            {
                case 0: return IsOpened;
case 1: return FailReason;
case 2: return FSampleTime;
case 3: return VAccel;
case 4: return VGyro;
case 5: return UnOffScaleFlags;

                default:
                    index -= 6;
                    return null;
            };
        }

             protected override ISyncRef GetImpulseInternal(ref int index)
        {
            var @base = base.GetImpulseInternal(ref index);

            if(@base != null)
                return @base;

            switch(index)
            {
                case 0: return OnOpened;
case 1: return OnClosed;
case 2: return OnFail;
case 3: return OnData;

                default:
                    index -= 4;
                    return null;
            };
        }

        

        

        
        
        
        

        
        

        

		public readonly SyncRef<global::FrooxEngine.ProtoFlux.INodeObjectOutput<global::System.String>> DevicePath;
		public readonly SyncRef<ISyncNodeOperation> OnOpened;
		public readonly SyncRef<ISyncNodeOperation> OnClosed;
		public readonly SyncRef<ISyncNodeOperation> OnFail;
		public readonly SyncRef<ISyncNodeOperation> OnData;
		public readonly global::FrooxEngine.ProtoFlux.NodeValueOutput<global::System.Boolean> IsOpened;
		public readonly global::FrooxEngine.ProtoFlux.NodeValueOutput<global::OpenvrDataGetter.ImuReader.ErrorCode> FailReason;
		public readonly global::FrooxEngine.ProtoFlux.NodeValueOutput<global::System.Double> FSampleTime;
		public readonly global::FrooxEngine.ProtoFlux.NodeValueOutput<global::Elements.Core.double3> VAccel;
		public readonly global::FrooxEngine.ProtoFlux.NodeValueOutput<global::Elements.Core.double3> VGyro;
		public readonly global::FrooxEngine.ProtoFlux.NodeValueOutput<global::Valve.VR.Imu_OffScaleFlags> UnOffScaleFlags;

    }
}
